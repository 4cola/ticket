
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "citext" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "moddatetime" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."ads_position" AS ENUM (
    'sides',
    'banner',
    'right-sticky'
);

ALTER TYPE "public"."ads_position" OWNER TO "postgres";

CREATE TYPE "public"."type" AS ENUM (
    'navi',
    'promo',
    'spider',
    'undo',
    'unknown'
);

ALTER TYPE "public"."type" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."create_tags_name_cn"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  IF NEW.name_cn IS NULL OR NEW.name_cn = '' THEN
    NEW.name_cn := NEW.name;
  END IF;
  RETURN NEW;
END;
$$;

ALTER FUNCTION "public"."create_tags_name_cn"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."generate_uid"() RETURNS "text"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
  chars text[] := array[
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'
  ];
  uid text := '';
BEGIN
  FOR i IN 1..8 LOOP
    uid := uid || chars[1 + round(random() * (array_length(chars, 1) - 1))];
  END LOOP;
  RETURN uid;
END;
$$;

ALTER FUNCTION "public"."generate_uid"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."update_tag_count"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  -- 处理插入操作
  IF TG_OP = 'INSERT' THEN
    UPDATE tags
    SET count = count + 1
    WHERE id = NEW.tag_id;
  -- 处理删除操作
  ELSIF TG_OP = 'DELETE' THEN
    UPDATE tags
    SET count = count - 1
    WHERE id = OLD.tag_id;
  -- 处理更新操作
  ELSIF TG_OP = 'UPDATE' THEN
    -- 当标签ID发生变化时，更新旧标签和新标签的计数字段
    IF OLD.tag_id <> NEW.tag_id THEN
      UPDATE tags
      SET count = count - 1
      WHERE id = OLD.tag_id;

      UPDATE tags
      SET count = count + 1
      WHERE id = NEW.tag_id;
    END IF;
  END IF;

  RETURN NULL;
END;
$$;

ALTER FUNCTION "public"."update_tag_count"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."categories" (
    "id" bigint NOT NULL,
    "name" character varying DEFAULT ''::character varying NOT NULL,
    "description" character varying DEFAULT ''::character varying NOT NULL,
    "slug" character varying NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."categories" OWNER TO "postgres";

ALTER TABLE "public"."categories" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."categories_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."configs" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "key" character varying DEFAULT ''::character varying NOT NULL,
    "value" "jsonb"
);

ALTER TABLE "public"."configs" OWNER TO "postgres";

ALTER TABLE "public"."configs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."configs_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."images" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "source" character varying(250),
    "url" character varying DEFAULT ''::character varying NOT NULL,
    "description" character varying DEFAULT ''::character varying NOT NULL,
    "hash" character varying
);

ALTER TABLE "public"."images" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."posts" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "uid" character varying(8) NOT NULL,
    "title" character varying(200) DEFAULT ''::character varying NOT NULL,
    "excerpt" character varying DEFAULT ''::character varying NOT NULL,
    "html" "text",
    "is_active" boolean DEFAULT false NOT NULL,
    "is_important" boolean DEFAULT false NOT NULL,
    "is_cn" boolean DEFAULT false NOT NULL,
    "featured_image" character varying,
    "visited" bigint DEFAULT '0'::bigint NOT NULL,
    "slug" character varying DEFAULT ''::character varying NOT NULL,
    "keywords" character varying,
    "ghost_id" character varying,
    "author_id" "uuid"
);

ALTER TABLE "public"."posts" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."posts_categories" (
    "post_id" bigint NOT NULL,
    "category_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."posts_categories" OWNER TO "postgres";

CREATE SEQUENCE IF NOT EXISTS "public"."posts_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."posts_id_seq" OWNER TO "postgres";

ALTER SEQUENCE "public"."posts_id_seq" OWNED BY "public"."posts"."id";

CREATE TABLE IF NOT EXISTS "public"."posts_raw" (
    "id" bigint NOT NULL,
    "post_id" bigint,
    "title" character varying DEFAULT ''::character varying NOT NULL,
    "excerpt" character varying DEFAULT ''::character varying NOT NULL,
    "keywords" character varying[],
    "featured_image" character varying,
    "html" "text",
    "tags" character varying[],
    "categories" character varying[],
    "is_cn" boolean DEFAULT false NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "source" character varying,
    "secrets" "jsonb",
    "markdown" "text",
    "slug" character varying,
    "author_id" "uuid",
    "is_verified" boolean DEFAULT true NOT NULL
);

ALTER TABLE "public"."posts_raw" OWNER TO "postgres";

ALTER TABLE "public"."posts_raw" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."posts_raw_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."posts_secrets" (
    "id" bigint NOT NULL,
    "version" character varying,
    "data" "jsonb",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "post_id" bigint NOT NULL
);

ALTER TABLE "public"."posts_secrets" OWNER TO "postgres";

ALTER TABLE "public"."posts_secrets" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."posts_secrets_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."posts_tags" (
    "post_id" bigint NOT NULL,
    "tag_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."posts_tags" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."tags" (
    "id" bigint NOT NULL,
    "created_at" timestamp(6) with time zone DEFAULT "now"() NOT NULL,
    "updated_at" timestamp(6) with time zone DEFAULT "now"() NOT NULL,
    "is_active" boolean DEFAULT true NOT NULL,
    "order" integer DEFAULT 0 NOT NULL,
    "name" character varying DEFAULT ''::character varying NOT NULL,
    "slug" character varying NOT NULL,
    "description" character varying DEFAULT ''::character varying NOT NULL,
    "count" integer DEFAULT 0 NOT NULL,
    "name_cn" character varying DEFAULT ''::character varying NOT NULL
);

ALTER TABLE "public"."tags" OWNER TO "postgres";

CREATE SEQUENCE IF NOT EXISTS "public"."tags_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."tags_id_seq" OWNER TO "postgres";

ALTER SEQUENCE "public"."tags_id_seq" OWNED BY "public"."tags"."id";

CREATE SEQUENCE IF NOT EXISTS "public"."tmr_image_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."tmr_image_id_seq" OWNER TO "postgres";

ALTER SEQUENCE "public"."tmr_image_id_seq" OWNED BY "public"."images"."id";

ALTER TABLE ONLY "public"."images" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."tmr_image_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."posts" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."posts_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."tags" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."tags_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."posts"
    ADD CONSTRAINT "Post_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."posts"
    ADD CONSTRAINT "Post_uid_key" UNIQUE ("uid");

ALTER TABLE ONLY "public"."categories"
    ADD CONSTRAINT "categories_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."categories"
    ADD CONSTRAINT "categories_slug_key" UNIQUE ("slug");

ALTER TABLE ONLY "public"."configs"
    ADD CONSTRAINT "configs_key_key" UNIQUE ("key");

ALTER TABLE ONLY "public"."configs"
    ADD CONSTRAINT "configs_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."posts_categories"
    ADD CONSTRAINT "posts_categories_pkey" PRIMARY KEY ("post_id", "category_id");

ALTER TABLE ONLY "public"."posts_raw"
    ADD CONSTRAINT "posts_raw_from_key" UNIQUE ("source");

ALTER TABLE ONLY "public"."posts_raw"
    ADD CONSTRAINT "posts_raw_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."posts_raw"
    ADD CONSTRAINT "posts_raw_post_id_key" UNIQUE ("post_id");

ALTER TABLE ONLY "public"."posts_secrets"
    ADD CONSTRAINT "posts_secrets_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."posts_tags"
    ADD CONSTRAINT "posts_tags_pkey" PRIMARY KEY ("post_id", "tag_id");

ALTER TABLE ONLY "public"."images"
    ADD CONSTRAINT "source_unique" UNIQUE ("source");

ALTER TABLE ONLY "public"."tags"
    ADD CONSTRAINT "tags_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."tags"
    ADD CONSTRAINT "tags_uri_928cdc64_uniq" UNIQUE ("slug");

ALTER TABLE ONLY "public"."images"
    ADD CONSTRAINT "tmr_image_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."posts_secrets"
    ADD CONSTRAINT "unique_post_id" UNIQUE ("post_id");

ALTER TABLE ONLY "public"."posts"
    ADD CONSTRAINT "unique_posts_ghost_id" UNIQUE ("ghost_id");

ALTER TABLE ONLY "public"."posts"
    ADD CONSTRAINT "unique_posts_slug" UNIQUE ("slug");

ALTER TABLE ONLY "public"."images"
    ADD CONSTRAINT "url_unique" UNIQUE ("url");

CREATE INDEX "Post_uid_5c70a06a_like" ON "public"."posts" USING "btree" ("uid" "varchar_pattern_ops");

CREATE INDEX "idx_create_time" ON "public"."posts" USING "btree" ("created_at");

CREATE INDEX "idx_ghost_id" ON "public"."posts" USING "btree" ("ghost_id");

CREATE INDEX "idx_slug" ON "public"."posts" USING "btree" ("slug");

CREATE INDEX "tags_uri_928cdc64_like" ON "public"."tags" USING "btree" ("slug" "varchar_pattern_ops");

CREATE OR REPLACE TRIGGER "update_tag_count_trigger" AFTER INSERT OR DELETE OR UPDATE ON "public"."posts_tags" FOR EACH ROW EXECUTE FUNCTION "public"."update_tag_count"();

ALTER TABLE ONLY "public"."posts"
    ADD CONSTRAINT "posts_author_id_fkey" FOREIGN KEY ("author_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."posts_categories"
    ADD CONSTRAINT "posts_categories_category_id_fkey" FOREIGN KEY ("category_id") REFERENCES "public"."categories"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."posts_categories"
    ADD CONSTRAINT "posts_categories_post_id_fkey" FOREIGN KEY ("post_id") REFERENCES "public"."posts"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."posts_raw"
    ADD CONSTRAINT "posts_raw_author_id_fkey" FOREIGN KEY ("author_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."posts_raw"
    ADD CONSTRAINT "posts_raw_post_id_fkey" FOREIGN KEY ("post_id") REFERENCES "public"."posts"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."posts_secrets"
    ADD CONSTRAINT "posts_secrets_post_id_fkey" FOREIGN KEY ("post_id") REFERENCES "public"."posts"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."posts_tags"
    ADD CONSTRAINT "posts_tags_post_id_fkey" FOREIGN KEY ("post_id") REFERENCES "public"."posts"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."posts_tags"
    ADD CONSTRAINT "posts_tags_tag_id_fkey" FOREIGN KEY ("tag_id") REFERENCES "public"."tags"("id") ON DELETE CASCADE;

CREATE POLICY "Enable insert for authenticated users only" ON "public"."posts_raw" FOR INSERT TO "authenticated" WITH CHECK ((("is_verified" IS FALSE) AND ("author_id" = "auth"."uid"())));

CREATE POLICY "Enable read access for all users" ON "public"."categories" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."configs" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."images" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."posts" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."posts_categories" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."posts_secrets" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."posts_tags" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."tags" FOR SELECT USING (true);

CREATE POLICY "Enable read access for self posts_raw" ON "public"."posts_raw" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "author_id"));

ALTER TABLE "public"."categories" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."configs" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."images" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."posts" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."posts_categories" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."posts_raw" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."posts_secrets" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."posts_tags" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."tags" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."create_tags_name_cn"() TO "anon";
GRANT ALL ON FUNCTION "public"."create_tags_name_cn"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_tags_name_cn"() TO "service_role";

GRANT ALL ON FUNCTION "public"."generate_uid"() TO "anon";
GRANT ALL ON FUNCTION "public"."generate_uid"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."generate_uid"() TO "service_role";

GRANT ALL ON FUNCTION "public"."update_tag_count"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_tag_count"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_tag_count"() TO "service_role";

GRANT ALL ON TABLE "public"."categories" TO "anon";
GRANT ALL ON TABLE "public"."categories" TO "authenticated";
GRANT ALL ON TABLE "public"."categories" TO "service_role";

GRANT ALL ON SEQUENCE "public"."categories_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."categories_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."categories_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."configs" TO "anon";
GRANT ALL ON TABLE "public"."configs" TO "authenticated";
GRANT ALL ON TABLE "public"."configs" TO "service_role";

GRANT ALL ON SEQUENCE "public"."configs_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."configs_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."configs_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."images" TO "anon";
GRANT ALL ON TABLE "public"."images" TO "authenticated";
GRANT ALL ON TABLE "public"."images" TO "service_role";

GRANT ALL ON TABLE "public"."posts" TO "anon";
GRANT ALL ON TABLE "public"."posts" TO "authenticated";
GRANT ALL ON TABLE "public"."posts" TO "service_role";

GRANT ALL ON TABLE "public"."posts_categories" TO "anon";
GRANT ALL ON TABLE "public"."posts_categories" TO "authenticated";
GRANT ALL ON TABLE "public"."posts_categories" TO "service_role";

GRANT ALL ON SEQUENCE "public"."posts_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."posts_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."posts_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."posts_raw" TO "anon";
GRANT ALL ON TABLE "public"."posts_raw" TO "authenticated";
GRANT ALL ON TABLE "public"."posts_raw" TO "service_role";

GRANT ALL ON SEQUENCE "public"."posts_raw_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."posts_raw_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."posts_raw_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."posts_secrets" TO "anon";
GRANT ALL ON TABLE "public"."posts_secrets" TO "authenticated";
GRANT ALL ON TABLE "public"."posts_secrets" TO "service_role";

GRANT ALL ON SEQUENCE "public"."posts_secrets_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."posts_secrets_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."posts_secrets_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."posts_tags" TO "anon";
GRANT ALL ON TABLE "public"."posts_tags" TO "authenticated";
GRANT ALL ON TABLE "public"."posts_tags" TO "service_role";

GRANT ALL ON TABLE "public"."tags" TO "anon";
GRANT ALL ON TABLE "public"."tags" TO "authenticated";
GRANT ALL ON TABLE "public"."tags" TO "service_role";

GRANT ALL ON SEQUENCE "public"."tags_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tags_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tags_id_seq" TO "service_role";

GRANT ALL ON SEQUENCE "public"."tmr_image_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tmr_image_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tmr_image_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
