create table "public"."groups" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" character varying not null default ''::character varying
);


alter table "public"."groups" enable row level security;

create table "public"."users_groups" (
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "group_id" bigint not null
);


alter table "public"."users_groups" enable row level security;

CREATE UNIQUE INDEX groups_name_key ON public.groups USING btree (name);

CREATE UNIQUE INDEX groups_pkey ON public.groups USING btree (id);

CREATE UNIQUE INDEX users_groups_pkey ON public.users_groups USING btree (user_id, group_id);

alter table "public"."groups" add constraint "groups_pkey" PRIMARY KEY using index "groups_pkey";

alter table "public"."users_groups" add constraint "users_groups_pkey" PRIMARY KEY using index "users_groups_pkey";

alter table "public"."groups" add constraint "groups_name_key" UNIQUE using index "groups_name_key";

alter table "public"."users_groups" add constraint "users_groups_group_id_fkey" FOREIGN KEY (group_id) REFERENCES groups(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."users_groups" validate constraint "users_groups_group_id_fkey";

alter table "public"."users_groups" add constraint "users_groups_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."users_groups" validate constraint "users_groups_user_id_fkey";

grant delete on table "public"."groups" to "anon";

grant insert on table "public"."groups" to "anon";

grant references on table "public"."groups" to "anon";

grant select on table "public"."groups" to "anon";

grant trigger on table "public"."groups" to "anon";

grant truncate on table "public"."groups" to "anon";

grant update on table "public"."groups" to "anon";

grant delete on table "public"."groups" to "authenticated";

grant insert on table "public"."groups" to "authenticated";

grant references on table "public"."groups" to "authenticated";

grant select on table "public"."groups" to "authenticated";

grant trigger on table "public"."groups" to "authenticated";

grant truncate on table "public"."groups" to "authenticated";

grant update on table "public"."groups" to "authenticated";

grant delete on table "public"."groups" to "service_role";

grant insert on table "public"."groups" to "service_role";

grant references on table "public"."groups" to "service_role";

grant select on table "public"."groups" to "service_role";

grant trigger on table "public"."groups" to "service_role";

grant truncate on table "public"."groups" to "service_role";

grant update on table "public"."groups" to "service_role";

grant delete on table "public"."users_groups" to "anon";

grant insert on table "public"."users_groups" to "anon";

grant references on table "public"."users_groups" to "anon";

grant select on table "public"."users_groups" to "anon";

grant trigger on table "public"."users_groups" to "anon";

grant truncate on table "public"."users_groups" to "anon";

grant update on table "public"."users_groups" to "anon";

grant delete on table "public"."users_groups" to "authenticated";

grant insert on table "public"."users_groups" to "authenticated";

grant references on table "public"."users_groups" to "authenticated";

grant select on table "public"."users_groups" to "authenticated";

grant trigger on table "public"."users_groups" to "authenticated";

grant truncate on table "public"."users_groups" to "authenticated";

grant update on table "public"."users_groups" to "authenticated";

grant delete on table "public"."users_groups" to "service_role";

grant insert on table "public"."users_groups" to "service_role";

grant references on table "public"."users_groups" to "service_role";

grant select on table "public"."users_groups" to "service_role";

grant trigger on table "public"."users_groups" to "service_role";

grant truncate on table "public"."users_groups" to "service_role";

grant update on table "public"."users_groups" to "service_role";

create policy "Enable all for users based on user_id"
on "public"."posts"
as permissive
for all
to authenticated
using ((auth.uid() = author_id))
with check ((auth.uid() = author_id));
